/* -LICENSE-START-
 ** Copyright (c) 2023 Blackmagic Design
 **  
 ** Permission is hereby granted, free of charge, to any person or organization 
 ** obtaining a copy of the software and accompanying documentation (the 
 ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
 ** and transmit the Software, and to prepare derivative works of the Software, 
 ** and to permit third-parties to whom the Software is furnished to do so, in 
 ** accordance with:
 ** 
 ** (1) if the Software is obtained from Blackmagic Design, the End User License 
 ** Agreement for the Software Development Kit ("EULA") available at 
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 ** 
 ** (2) if the Software is obtained from any third party, such licensing terms 
 ** as notified by that third party,
 ** 
 ** and all subject to the following:
 ** 
 ** (3) the copyright notices in the Software and this entire statement, 
 ** including the above license grant, this restriction and the following 
 ** disclaimer, must be included in all copies of the Software, in whole or in 
 ** part, and all derivative works of the Software, unless such copies or 
 ** derivative works are solely in the form of machine-executable object code 
 ** generated by a source language processor.
 ** 
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 ** DEALINGS IN THE SOFTWARE.
 ** 
 ** A copy of the Software is available free of charge at 
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 ** 
 ** -LICENSE-END-
 */
/* DeckLinkAPI_v14_2_1.idl */


// Forward Declarations

interface IDeckLinkVideoOutputCallback_v14_2_1;
interface IDeckLinkInputCallback_v14_2_1;
interface IDeckLinkEncoderInputCallback_v14_2_1;
interface IDeckLinkMemoryAllocator_v14_2_1;
interface IDeckLinkOutput_v14_2_1;
interface IDeckLinkInput_v14_2_1;
interface IDeckLinkEncoderInput_v14_2_1;
interface IDeckLinkVideoFrame_v14_2_1;
interface IDeckLinkMutableVideoFrame_v14_2_1;
interface IDeckLinkVideoFrame3DExtensions_v14_2_1;
interface IDeckLinkVideoInputFrame_v14_2_1;
interface IDeckLinkScreenPreviewCallback_v14_2_1;
interface IDeckLinkGLScreenPreviewHelper_v14_2_1;
interface IDeckLinkDX9ScreenPreviewHelper_v14_2_1;
interface IDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1;
interface IDeckLinkVideoConversion_v14_2_1;

/* Interface IDeckLinkVideoOutputCallback_v14_2_1 - Frame completion callback. */

[
    object,
    uuid(20AA5225-1958-47CB-820B-80A8D521A6EE),
    helpstring("Frame completion callback.")
] interface IDeckLinkVideoOutputCallback_v14_2_1 : IUnknown
{
    HRESULT ScheduledFrameCompleted ([in] IDeckLinkVideoFrame_v14_2_1* completedFrame, [in] BMDOutputFrameCompletionResult result);
    HRESULT ScheduledPlaybackHasStopped (void);
};

/* Interface IDeckLinkInputCallback_v14_2_1 - Frame arrival callback. */

[
    object,
    uuid(C6FCE4C9-C4E4-4047-82FB-5D238232A902),
    helpstring("Frame arrival callback.")
] interface IDeckLinkInputCallback_v14_2_1 : IUnknown
{
    HRESULT VideoInputFormatChanged ([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode* newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
    HRESULT VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame_v14_2_1* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
};

/* Interface IDeckLinkMemoryAllocator_v14_2_1 - Memory allocator for video frames. */

[
    object,
    uuid(B36EB6E7-9D29-4AA8-92EF-843B87A289E8),
    local,
    helpstring("Memory allocator for video frames.")
] interface IDeckLinkMemoryAllocator_v14_2_1 : IUnknown
{
    HRESULT AllocateBuffer ([in] unsigned int bufferSize, [out] void** allocatedBuffer);
    HRESULT ReleaseBuffer ([in] void* buffer);
    HRESULT Commit (void);
    HRESULT Decommit (void);
};

/* Interface IDeckLinkOutput_v14_2_1 - Created by QueryInterface from IDeckLink. */

[
    object,
    uuid(BE2D9020-461E-442F-84B7-E949CB953B9D),
    local,
    helpstring("Created by QueryInterface from IDeckLink.")
] interface IDeckLinkOutput_v14_2_1 : IUnknown
{
    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoOutputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback_v14_2_1* previewCallback);

    /* Video Output */

    HRESULT EnableVideoOutput ([in] BMDDisplayMode displayMode, [in] BMDVideoOutputFlags flags);
    HRESULT DisableVideoOutput (void);
    HRESULT SetVideoOutputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator_v14_2_1* theAllocator);
    HRESULT CreateVideoFrame ([in] int width, [in] int height, [in] int rowBytes, [in] BMDPixelFormat pixelFormat, [in] BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame_v14_2_1** outFrame);
    HRESULT CreateAncillaryData ([in] BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary** outBuffer);	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
    HRESULT DisplayVideoFrameSync ([in] IDeckLinkVideoFrame_v14_2_1* theFrame);
    HRESULT ScheduleVideoFrame ([in] IDeckLinkVideoFrame_v14_2_1* theFrame, [in] BMDTimeValue displayTime, [in] BMDTimeValue displayDuration, [in] BMDTimeScale timeScale);
    HRESULT SetScheduledFrameCompletionCallback ([in] IDeckLinkVideoOutputCallback_v14_2_1* theCallback);
    HRESULT GetBufferedVideoFrameCount ([out] unsigned int* bufferedFrameCount);

    /* Audio Output */

    HRESULT EnableAudioOutput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount, [in] BMDAudioOutputStreamType streamType);
    HRESULT DisableAudioOutput (void);
    HRESULT WriteAudioSamplesSync ([in] void* buffer, [in] unsigned int sampleFrameCount, [out] unsigned int* sampleFramesWritten);
    HRESULT BeginAudioPreroll (void);
    HRESULT EndAudioPreroll (void);
    HRESULT ScheduleAudioSamples ([in] void* buffer, [in] unsigned int sampleFrameCount, [in] BMDTimeValue streamTime, [in] BMDTimeScale timeScale, [out] unsigned int* sampleFramesWritten);
    HRESULT GetBufferedAudioSampleFrameCount ([out] unsigned int* bufferedSampleFrameCount);
    HRESULT FlushBufferedAudioSamples (void);
    HRESULT SetAudioCallback ([in] IDeckLinkAudioOutputCallback* theCallback);

    /* Output Control */

    HRESULT StartScheduledPlayback ([in] BMDTimeValue playbackStartTime, [in] BMDTimeScale timeScale, [in] double playbackSpeed);
    HRESULT StopScheduledPlayback ([in] BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue* actualStopTime, [in] BMDTimeScale timeScale);
    HRESULT IsScheduledPlaybackRunning ([out] BOOL* active);
    HRESULT GetScheduledStreamTime ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* streamTime, [out] double* playbackSpeed);
    HRESULT GetReferenceStatus ([out] BMDReferenceStatus* referenceStatus);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
    HRESULT GetFrameCompletionReferenceTimestamp ([in] IDeckLinkVideoFrame_v14_2_1* theFrame, [in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* frameCompletionTimestamp);
};

/* Interface IDeckLinkInput_v14_2_1 - Created by QueryInterface from IDeckLink. */

[
    object,
    uuid(C21CDB6E-F414-46E4-A636-80A566E0ED37),
    helpstring("Created by QueryInterface from IDeckLink.")
] interface IDeckLinkInput_v14_2_1 : IUnknown
{
    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoInputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback_v14_2_1* previewCallback);

    /* Video Input */

    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
    HRESULT DisableVideoInput (void);
    HRESULT GetAvailableVideoFrameCount ([out] unsigned int* availableFrameCount);
    HRESULT SetVideoInputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator_v14_2_1* theAllocator);

    /* Audio Input */

    HRESULT EnableAudioInput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
    HRESULT DisableAudioInput (void);
    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);

    /* Input Control */

    HRESULT StartStreams (void);
    HRESULT StopStreams (void);
    HRESULT PauseStreams (void);
    HRESULT FlushStreams (void);
    HRESULT SetCallback ([in] IDeckLinkInputCallback_v14_2_1* theCallback);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
};

/* Interface IDeckLinkEncoderInput_v14_2_1 - Created by QueryInterface from IDeckLink. */

[
    object,
    uuid(F222551D-13DF-4FD8-B587-9D4F19EC12C9),
    helpstring("Created by QueryInterface from IDeckLink.")
] interface IDeckLinkEncoderInput_v14_2_1 : IUnknown
{
    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedCodec, [in] unsigned int requestedCodecProfile, [in] BMDSupportedVideoModeFlags flags, [out] BOOL* supported);
    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);

    /* Video Input */

    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
    HRESULT DisableVideoInput (void);
    HRESULT GetAvailablePacketsCount ([out] unsigned int* availablePacketsCount);
    HRESULT SetMemoryAllocator ([in] IDeckLinkMemoryAllocator_v14_2_1* theAllocator);

    /* Audio Input */

    HRESULT EnableAudioInput ([in] BMDAudioFormat audioFormat, [in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
    HRESULT DisableAudioInput (void);
    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);

    /* Input Control */

    HRESULT StartStreams (void);
    HRESULT StopStreams (void);
    HRESULT PauseStreams (void);
    HRESULT FlushStreams (void);
    HRESULT SetCallback ([in] IDeckLinkEncoderInputCallback* theCallback);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
};

/* Interface IDeckLinkVideoFrame_v14_2_1 - Interface to encapsulate a video frame; can be caller-implemented. */

[
    object,
    uuid(3F716FE0-F023-4111-BE5D-EF4414C05B17),
    local,
    helpstring("Interface to encapsulate a video frame; can be caller-implemented.")
] interface IDeckLinkVideoFrame_v14_2_1 : IUnknown
{
    long GetWidth (void);
    long GetHeight (void);
    long GetRowBytes (void);
    BMDPixelFormat GetPixelFormat (void);
    BMDFrameFlags GetFlags (void);
    HRESULT GetBytes ([out] void** buffer);
    HRESULT GetTimecode ([in] BMDTimecodeFormat format, [out] IDeckLinkTimecode** timecode);
    HRESULT GetAncillaryData ([out] IDeckLinkVideoFrameAncillary** ancillary);	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
};

/* Interface IDeckLinkMutableVideoFrame_v14_2_1 - Created by IDeckLinkOutput::CreateVideoFrame. */

[
    object,
    uuid(69E2639F-40DA-4E19-B6F2-20ACE815C390),
    local,
    helpstring("Created by IDeckLinkOutput::CreateVideoFrame.")
] interface IDeckLinkMutableVideoFrame_v14_2_1 : IDeckLinkVideoFrame_v14_2_1
{
    HRESULT SetFlags ([in] BMDFrameFlags newFlags);
    HRESULT SetTimecode ([in] BMDTimecodeFormat format, [in] IDeckLinkTimecode* timecode);
    HRESULT SetTimecodeFromComponents ([in] BMDTimecodeFormat format, [in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames, [in] BMDTimecodeFlags flags);
    HRESULT SetAncillaryData ([in] IDeckLinkVideoFrameAncillary* ancillary);
    HRESULT SetTimecodeUserBits ([in] BMDTimecodeFormat format, [in] BMDTimecodeUserBits userBits);
};

/* Interface IDeckLinkVideoFrame3DExtensions_v14_2_1 - Optional interface implemented on IDeckLinkVideoFrame to support 3D frames */

[
    object,
    uuid(DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7),
    local,
    helpstring("Optional interface implemented on IDeckLinkVideoFrame to support 3D frames")
] interface IDeckLinkVideoFrame3DExtensions_v14_2_1 : IUnknown
{
    BMDVideo3DPackingFormat Get3DPackingFormat (void);
    HRESULT GetFrameForRightEye ([out] IDeckLinkVideoFrame_v14_2_1** rightEyeFrame);
};

/* Interface IDeckLinkVideoInputFrame_v14_2_1 - Provided by the IDeckLinkVideoInput frame arrival callback. */

[
    object,
    uuid(05CFE374-537C-4094-9A57-680525118F44),
    local,
    helpstring("Provided by the IDeckLinkVideoInput frame arrival callback.")
] interface IDeckLinkVideoInputFrame_v14_2_1 : IDeckLinkVideoFrame_v14_2_1
{
    HRESULT GetStreamTime ([out] BMDTimeValue* frameTime, [out] BMDTimeValue* frameDuration, [in] BMDTimeScale timeScale);
    HRESULT GetHardwareReferenceTimestamp ([in] BMDTimeScale timeScale, [out] BMDTimeValue* frameTime, [out] BMDTimeValue* frameDuration);
};

/* Interface IDeckLinkScreenPreviewCallback_v14_2_1 - Screen preview callback */

[
    object,
    uuid(B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438),
    local,
    helpstring("Screen preview callback")
] interface IDeckLinkScreenPreviewCallback_v14_2_1 : IUnknown
{
    HRESULT DrawFrame ([in] IDeckLinkVideoFrame_v14_2_1* theFrame);
};

/* Interface IDeckLinkGLScreenPreviewHelper_v14_2_1 - Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms. */

[
    object,
    uuid(504E2209-CAC7-4C1A-9FB4-C5BB6274D22F),
    local,
    helpstring("Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms.")
] interface IDeckLinkGLScreenPreviewHelper_v14_2_1 : IUnknown
{

    /* Methods must be called with OpenGL context set */

    HRESULT InitializeGL (void);
    HRESULT PaintGL (void);
    HRESULT SetFrame ([in] IDeckLinkVideoFrame_v14_2_1* theFrame);
    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
};

/* Interface IDeckLinkDX9ScreenPreviewHelper_v14_2_1 - Created with CoCreateInstance. */

[
    object,
    uuid(2094B522-D1A1-40C0-9AC7-1C012218EF02),
    local,
    helpstring("Created with CoCreateInstance.")
] interface IDeckLinkDX9ScreenPreviewHelper_v14_2_1 : IUnknown
{
    HRESULT Initialize ([in] void* device);
    HRESULT Render ([in] RECT* rc);
    HRESULT SetFrame ([in] IDeckLinkVideoFrame_v14_2_1* theFrame);
    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
};

/* Interface IDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1 - Created with CoCreateInstance(). */

[
    object,
    uuid(AD8EC84A-7DDE-11E9-8F9E-2A86E4085A59),
    local,
    helpstring("Created with CoCreateInstance().")
] interface IDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1 : IUnknown
{
    HRESULT Initialize (void);
    HRESULT Render (void);
    HRESULT SetSurfaceSize ([in] unsigned int width, [in] unsigned int height);
    HRESULT SetFrame ([in] IDeckLinkVideoFrame_v14_2_1* theFrame);
    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
    HRESULT GetBackBuffer ([out] void** backBuffer);
};

/* Interface IDeckLinkVideoConversion_v14_2_1 - Created with CoCreateInstance. */

[
    object,
    uuid(3BBCB8A2-DA2C-42D9-B5D8-88083644E99A),
    local,
    helpstring("Created with CoCreateInstance.")
] interface IDeckLinkVideoConversion_v14_2_1 : IUnknown
{
    HRESULT ConvertFrame ([in] IDeckLinkVideoFrame_v14_2_1* srcFrame, [in] IDeckLinkVideoFrame_v14_2_1* dstFrame);
};


/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(F63E77C7-B655-4A4A-9AD0-3CA85D394343),
    helpstring("CDeckLinkGLScreenPreviewHelper_v14_2_1 Class")
] coclass CDeckLinkGLScreenPreviewHelper_v14_2_1
{
    [default] interface IDeckLinkGLScreenPreviewHelper_v14_2_1;
};

[
    uuid(00696A71-EBC7-491F-AC02-18D3393F33F0),
    helpstring("CDeckLinkGL3ScreenPreviewHelper_v14_2_1 Class. Requires OpenGL 3.2 support and provides improved performance and color handling")
] coclass CDeckLinkGL3ScreenPreviewHelper_v14_2_1
{
    [default] interface IDeckLinkGLScreenPreviewHelper_v14_2_1;
};

[
    uuid(CC010023-E01D-4525-9D59-80C8AB3DC7A0),
    helpstring("CDeckLinkDX9ScreenPreviewHelper_v14_2_1 Class")
] coclass CDeckLinkDX9ScreenPreviewHelper_v14_2_1
{
    [default] interface IDeckLinkDX9ScreenPreviewHelper_v14_2_1;
};

[
    uuid(EF2A8478-7DDF-11E9-8F9E-2A86E4085A59),
    helpstring("CDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1 Class")
] coclass CDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1
{
    [default] interface IDeckLinkWPFDX9ScreenPreviewHelper_v14_2_1;
};

[
    uuid(7DBBBB11-5B7B-467D-AEA4-CEA468FD368C),
    helpstring("CDeckLinkVideoConversion_v14_2_1 Class")
] coclass CDeckLinkVideoConversion_v14_2_1
{
    [default] interface IDeckLinkVideoConversion_v14_2_1;
};
