/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
//
//  DeckLinkDeviceDiscovery.cpp
//  DeckLink Device Discovery Callback
//

#include <QCoreApplication>
#include "DeckLinkDeviceDiscovery.h"
#include "DeckLinkCapture.h"
#include "common.h"

DeckLinkDeviceDiscovery::DeckLinkDeviceDiscovery(DeckLinkCapture *owner)
	: delegate_(owner)
	, refcount_(1)
{
#ifdef Q_OS_WIN
	if (CoCreateInstance(CLSID_CDeckLinkDiscovery, nullptr, CLSCTX_ALL, IID_IDeckLinkDiscovery, (void **)&decklink_discovery_) != S_OK) {
		decklink_discovery_ = nullptr;
	}
#else
	decklink_discovery_ = CreateDeckLinkDiscoveryInstance();
#endif
}


DeckLinkDeviceDiscovery::~DeckLinkDeviceDiscovery()
{
	if (decklink_discovery_) {
		// Uninstall device arrival notifications and release discovery object
		decklink_discovery_->UninstallDeviceNotifications();
		decklink_discovery_->Release();
		decklink_discovery_ = nullptr;
	}
}

bool DeckLinkDeviceDiscovery::enable()
{
	HRESULT result = E_FAIL;

	// Install device arrival notifications
	if (decklink_discovery_) {
		result = decklink_discovery_->InstallDeviceNotifications(this);
	}

	return result == S_OK;
}

void DeckLinkDeviceDiscovery::disable()
{
	// Uninstall device arrival notifications
	if (decklink_discovery_) {
		decklink_discovery_->UninstallDeviceNotifications();
	}
}

HRESULT DeckLinkDeviceDiscovery::DeckLinkDeviceArrived(IDeckLink *decklink)
{
	// Update UI (add new device to menu) from main thread
	QCoreApplication::postEvent(delegate_, new DeckLinkDeviceDiscoveryEvent(kAddDeviceEvent, decklink));
//	ui_delegate_->addDevice(decklink);
	return S_OK;
}

HRESULT DeckLinkDeviceDiscovery::DeckLinkDeviceRemoved(IDeckLink *decklink)
{
	// Update UI (remove new device to menu) from main thread
	QCoreApplication::postEvent(delegate_, new DeckLinkDeviceDiscoveryEvent(kRemoveDeviceEvent, decklink));
//	ui_delegate_->removeDevice(decklink);
	return S_OK;
}

HRESULT DeckLinkDeviceDiscovery::QueryInterface(REFIID iid, void **ppv)
{
	CFUUIDBytes iunknown;
	HRESULT result = E_NOINTERFACE;

	if (!ppv) return E_INVALIDARG;

	// Initialise the return result
	*ppv = nullptr;

	// Obtain the IUnknown interface and compare it the provided REFIID
#ifdef Q_OS_WIN
	iunknown = IID_IUnknown;
#else
	iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
#endif
	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0) {
		*ppv = this;
		AddRef();
		result = S_OK;
	} else if (memcmp(&iid, &IID_IDeckLinkDeviceNotificationCallback, sizeof(REFIID)) == 0) {
		*ppv = (IDeckLinkDeviceNotificationCallback*)this;
		AddRef();
		result = S_OK;
	}

	return result;
}

ULONG DeckLinkDeviceDiscovery::AddRef(void)
{
	return (ULONG)refcount_.fetchAndAddAcquire(1);
}

ULONG DeckLinkDeviceDiscovery::Release(void)
{
	ULONG newRefValue = (ULONG) refcount_.fetchAndAddAcquire(-1);
	if (newRefValue == 0) {
		delete this;
		return 0;
	}

	return newRefValue;
}
