/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
// ProfileCallback.cpp : implementation file
// DeckLink Device Profile Callback
//

#include "DeckLinkCapture.h"
#include "ProfileCallback.h"
#include "common.h"
#include <QCoreApplication>

ProfileCallback::ProfileCallback(DeckLinkCapture *owner)
	: delegate_(owner)
	, refcount_(1)
{
}

HRESULT ProfileCallback::ProfileChanging(IDeckLinkProfile * /* profileToBeActivated */, BOOL streamsWillBeForcedToStop)
{
	// When streamsWillBeForcedToStop is true, the profile to be activated is incompatible with the current
	// profile and capture will be stopped by the DeckLink driver. It is better to notify the
	// controller to gracefully stop capture, so that the UI is set to a known state.
	if (streamsWillBeForcedToStop) {
		delegate_->haltStreams();
	}
	return S_OK;
}

HRESULT ProfileCallback::ProfileActivated(IDeckLinkProfile *activatedProfile)
{
	QCoreApplication::postEvent(delegate_, new DeckLinkProfileCallbackEvent(kProfileActivatedEvent, activatedProfile));
//	delegate_->updateProfile(activatedProfile);
	return S_OK;
}

HRESULT ProfileCallback::QueryInterface(REFIID iid, void **ppv)
{
	CFUUIDBytes iunknown;
	HRESULT result = E_NOINTERFACE;

	if (!ppv) return E_INVALIDARG;

	// Initialise the return result
	*ppv = nullptr;

	// Obtain the IUnknown interface and compare it the provided REFIID
#ifdef Q_OS_WIN
	iunknown = IID_IUnknown;
#else
	iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
#endif
	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0) {
		*ppv = this;
		AddRef();
		result = S_OK;
	}

	return result;
}

ULONG ProfileCallback::AddRef(void)
{
	return (ULONG) refcount_.fetchAndAddAcquire(1);
}

ULONG ProfileCallback::Release(void)
{
	ULONG newRefValue = (ULONG)refcount_.fetchAndAddAcquire(-1);
	if (newRefValue == 0) {
		delete this;
		return 0;
	}

	return newRefValue;
}

